# Generated by Django 2.1.1 on 2019-06-16 17:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=140, null=True, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=140, null=True, verbose_name='Last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Antecedent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places='2', max_digits='10', null=True, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=140, verbose_name='Name')),
                ('country', models.TextField(blank=True, max_length=1000, verbose_name='Country')),
            ],
        ),
        migrations.CreateModel(
            name='Consequent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places='2', max_digits='10', null=True, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='ContextSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dimension', models.CharField(blank=True, max_length=140, verbose_name='Dimension')),
                ('domain', models.CharField(blank=True, max_length=140, verbose_name='Domain')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=140, verbose_name='Title')),
                ('description', models.TextField(blank=True, max_length=1000, verbose_name='Description')),
                ('users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Users')),
            ],
        ),
        migrations.CreateModel(
            name='Implication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=140, verbose_name='Name')),
                ('description', models.TextField(blank=True, max_length=1000, verbose_name='Description')),
                ('date', models.DateTimeField(blank=True, verbose_name='Date')),
            ],
        ),
        migrations.CreateModel(
            name='ItemAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=140, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=140, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='PertenanceGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places='2', max_digits='10', null=True, verbose_name='Value')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pertenance_grades', to='recommender.Item', verbose_name='Item')),
                ('item_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pertenance_grades', to='recommender.ItemAttribute', verbose_name='Item attribute')),
            ],
        ),
        migrations.CreateModel(
            name='PreferenceGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(default=0, verbose_name='Value')),
                ('item_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_grades', to='recommender.ItemAttribute', verbose_name='Item attribute')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_grades', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context_segments', models.ManyToManyField(to='recommender.ContextSegment', verbose_name='Context segments')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='recommender.Group', verbose_name='Group')),
                ('items', models.ManyToManyField(blank=True, to='recommender.Item', verbose_name='Items')),
            ],
        ),
        migrations.CreateModel(
            name='UserContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places='2', max_digits='10', null=True, verbose_name='Weight')),
                ('context_segment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_contexts', to='recommender.ContextSegment', verbose_name='Context segment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_contexts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Valoration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, max_length=1000, verbose_name='Comment')),
                ('score', models.IntegerField(default=0, verbose_name='Score')),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='valorations', to='recommender.Item', verbose_name='Valorated item')),
                ('recommendation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='valorations', to='recommender.Recommendation', verbose_name='Recommendation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='valorations', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='itemattribute',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_attributes', to='recommender.ItemCategory', verbose_name='Item category'),
        ),
        migrations.AddField(
            model_name='item',
            name='attributes',
            field=models.ManyToManyField(through='recommender.PertenanceGrade', to='recommender.ItemAttribute', verbose_name='Attributes'),
        ),
        migrations.AddField(
            model_name='item',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='recommender.City', verbose_name='City'),
        ),
        migrations.AddField(
            model_name='implication',
            name='antecedents',
            field=models.ManyToManyField(blank=True, related_name='implication_antecedents', through='recommender.Antecedent', to='recommender.ItemAttribute', verbose_name='Antecedents'),
        ),
        migrations.AddField(
            model_name='implication',
            name='consequents',
            field=models.ManyToManyField(blank=True, related_name='implication_consequents', through='recommender.Consequent', to='recommender.ItemAttribute', verbose_name='Consequents'),
        ),
        migrations.AddField(
            model_name='contextsegment',
            name='implications',
            field=models.ManyToManyField(blank=True, to='recommender.Implication', verbose_name='Implications'),
        ),
        migrations.AddField(
            model_name='consequent',
            name='implication',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consequents_values', to='recommender.Implication', verbose_name='Implication'),
        ),
        migrations.AddField(
            model_name='consequent',
            name='item_attribute',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consequents_values', to='recommender.ItemAttribute', verbose_name='Item attribute'),
        ),
        migrations.AddField(
            model_name='antecedent',
            name='implication',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='antecedents_values', to='recommender.Implication', verbose_name='Implication'),
        ),
        migrations.AddField(
            model_name='antecedent',
            name='item_attribute',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='antecedents_values', to='recommender.ItemAttribute', verbose_name='Item attribute'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='context_segments',
            field=models.ManyToManyField(through='recommender.UserContext', to='recommender.ContextSegment', verbose_name='Context segments'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='preferences',
            field=models.ManyToManyField(through='recommender.PreferenceGrade', to='recommender.ItemAttribute', verbose_name='Preferences'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
